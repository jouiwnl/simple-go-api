// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countUsersStmt, err = db.PrepareContext(ctx, CountUsers); err != nil {
		return nil, fmt.Errorf("error preparing query CountUsers: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, CreateUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, DeleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.existsUserByCpfStmt, err = db.PrepareContext(ctx, ExistsUserByCpf); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsUserByCpf: %w", err)
	}
	if q.existsUserByEmailStmt, err = db.PrepareContext(ctx, ExistsUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsUserByEmail: %w", err)
	}
	if q.getPaginatedUsersStmt, err = db.PrepareContext(ctx, GetPaginatedUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetPaginatedUsers: %w", err)
	}
	if q.getUserByIdStmt, err = db.PrepareContext(ctx, GetUserById); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserById: %w", err)
	}
	if q.getUsersStmt, err = db.PrepareContext(ctx, GetUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsers: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, UpdateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countUsersStmt != nil {
		if cerr := q.countUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUsersStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.existsUserByCpfStmt != nil {
		if cerr := q.existsUserByCpfStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsUserByCpfStmt: %w", cerr)
		}
	}
	if q.existsUserByEmailStmt != nil {
		if cerr := q.existsUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsUserByEmailStmt: %w", cerr)
		}
	}
	if q.getPaginatedUsersStmt != nil {
		if cerr := q.getPaginatedUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPaginatedUsersStmt: %w", cerr)
		}
	}
	if q.getUserByIdStmt != nil {
		if cerr := q.getUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIdStmt: %w", cerr)
		}
	}
	if q.getUsersStmt != nil {
		if cerr := q.getUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                    DBTX
	tx                    *sql.Tx
	countUsersStmt        *sql.Stmt
	createUserStmt        *sql.Stmt
	deleteUserStmt        *sql.Stmt
	existsUserByCpfStmt   *sql.Stmt
	existsUserByEmailStmt *sql.Stmt
	getPaginatedUsersStmt *sql.Stmt
	getUserByIdStmt       *sql.Stmt
	getUsersStmt          *sql.Stmt
	updateUserStmt        *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                    tx,
		tx:                    tx,
		countUsersStmt:        q.countUsersStmt,
		createUserStmt:        q.createUserStmt,
		deleteUserStmt:        q.deleteUserStmt,
		existsUserByCpfStmt:   q.existsUserByCpfStmt,
		existsUserByEmailStmt: q.existsUserByEmailStmt,
		getPaginatedUsersStmt: q.getPaginatedUsersStmt,
		getUserByIdStmt:       q.getUserByIdStmt,
		getUsersStmt:          q.getUsersStmt,
		updateUserStmt:        q.updateUserStmt,
	}
}
